//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_Andersen.ClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetMessage", ReplyAction="http://tempuri.org/IClientService/GetMessageResponse")]
        string GetMessage(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetMessage", ReplyAction="http://tempuri.org/IClientService/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllClients", ReplyAction="http://tempuri.org/IClientService/GetAllClientsResponse")]
        Model.DataContract.ClientContract[] GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllClients", ReplyAction="http://tempuri.org/IClientService/GetAllClientsResponse")]
        System.Threading.Tasks.Task<Model.DataContract.ClientContract[]> GetAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        void AddClient(Model.DataContract.ClientContract client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddClient", ReplyAction="http://tempuri.org/IClientService/AddClientResponse")]
        System.Threading.Tasks.Task AddClientAsync(Model.DataContract.ClientContract client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteClient", ReplyAction="http://tempuri.org/IClientService/DeleteClientResponse")]
        void DeleteClient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteClient", ReplyAction="http://tempuri.org/IClientService/DeleteClientResponse")]
        System.Threading.Tasks.Task DeleteClientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientById", ReplyAction="http://tempuri.org/IClientService/GetClientByIdResponse")]
        Model.DataContract.ClientContract GetClientById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetClientById", ReplyAction="http://tempuri.org/IClientService/GetClientByIdResponse")]
        System.Threading.Tasks.Task<Model.DataContract.ClientContract> GetClientByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        void UpdateClient(Model.DataContract.ClientContract client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateClient", ReplyAction="http://tempuri.org/IClientService/UpdateClientResponse")]
        System.Threading.Tasks.Task UpdateClientAsync(Model.DataContract.ClientContract client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : WPF_Andersen.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<WPF_Andersen.ClientService.IClientService>, WPF_Andersen.ClientService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetMessage(string name) {
            return base.Channel.GetMessage(name);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string name) {
            return base.Channel.GetMessageAsync(name);
        }
        
        public Model.DataContract.ClientContract[] GetAllClients() {
            return base.Channel.GetAllClients();
        }
        
        public System.Threading.Tasks.Task<Model.DataContract.ClientContract[]> GetAllClientsAsync() {
            return base.Channel.GetAllClientsAsync();
        }
        
        public void AddClient(Model.DataContract.ClientContract client) {
            base.Channel.AddClient(client);
        }
        
        public System.Threading.Tasks.Task AddClientAsync(Model.DataContract.ClientContract client) {
            return base.Channel.AddClientAsync(client);
        }
        
        public void DeleteClient(int id) {
            base.Channel.DeleteClient(id);
        }
        
        public System.Threading.Tasks.Task DeleteClientAsync(int id) {
            return base.Channel.DeleteClientAsync(id);
        }
        
        public Model.DataContract.ClientContract GetClientById(int id) {
            return base.Channel.GetClientById(id);
        }
        
        public System.Threading.Tasks.Task<Model.DataContract.ClientContract> GetClientByIdAsync(int id) {
            return base.Channel.GetClientByIdAsync(id);
        }
        
        public void UpdateClient(Model.DataContract.ClientContract client) {
            base.Channel.UpdateClient(client);
        }
        
        public System.Threading.Tasks.Task UpdateClientAsync(Model.DataContract.ClientContract client) {
            return base.Channel.UpdateClientAsync(client);
        }
    }
}
